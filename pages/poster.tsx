import { GetServerSideProps } from "next";
import "../app/globals.css";

import Image from "next/image";
import JoinTime from "@/components/JoinTime";
import { createQrcode } from "@/utils/qrcode";

const avatarWidth = 200;
const avatarSpace = 15;

interface IPosterProps {
  bgIndex: number;
  width: number;
  subject: string;
  title: string;
  date: string;
  qrcode: string;
  users: {
    profile_image_url: string;
    username: string;
  }[];
}

export default function Poster(props: IPosterProps) {
  const { subject, title, date, users, bgIndex } = props;

  return (
    <main
      className="mx-auto p-[80px] text-[#FFFFFF]"
      id="poster"
      style={{
        background: `url('/bgs/bg_${bgIndex}.png')`,
        backgroundSize: "100% 100%",
        width: `${props.width}px`,
      }}
    >
      <div className="flex justify-between items-center">
        <span className="h-[72px] leading-[72px] text-[40px] bg-[#000] rounded-[12px] px-[30px] font-[700] inline-block shrink-0">
          {subject}
        </span>

        <div className="h-[72px] border-[4px] border-[#000] rounded-[12px] overflow-hidden flex">
          <div className="bg-[#000] h-[100%] p-[16px]">
            <span className="px-[8px] border-[#03CF66] border-[4px] rounded-[8px] text-[24px] font-[900] text-[#03CF66]">
              JOIN
            </span>
          </div>

          <div
            style={{
              background:
                "linear-gradient(234.5deg, #D9D9D9 13.53%, #A7DAEF 25.68%, #D1E2C4 43.43%, #DEDDBF 56.33%, #DEB7BC 75.78%, #B4BBCE 88.17%)",
            }}
            className="h-[100%] text-center px-[12px] w-[160px] flex justify-center items-center"
          >
            <span className="text-[#000] text-[20px] font-[700] leading-[24px]">
              Generated by @JoineventBot
            </span>
          </div>
        </div>
      </div>

      <div className="text-[110px] leading-[110px] mt-[50px] break-words line-clamp-3">
        {title}
      </div>

      <div
        className={`flex mt-[40px] ${users.length === 1 && "justify-center"}`}
      >
        {users.map((user, index) => {
          return (
            <div
              className="rounded-[100px] width-[200px] flex flex-col items-center mt-[20px] ml-[-15px] shrink-0"
              key={index}
            >
              <Image
                className="rounded-[100px]"
                src={user.profile_image_url}
                alt=""
                width="200"
                height="200"
              />

              <div className="text-[27px] leading-[33px] text-[#FFFFFF] text-center max-w-[calc(100%-20px)] break-words mt-[20px]">
                @{user.username}
              </div>
            </div>
          );
        })}
      </div>

      <div className="mt-[80px] flex items-center">
        <div className="w-[744px] h-[180px] rounded-[24px] border-[4px] border-[#000] relative">
          <div className="absolute top-[-23px] left-[30px] z-10">
            <JoinTime text="JOIN SPACE TIME" />
          </div>

          <div
            className="bg-[red] absolute top-0 left-0 right-0 bottom-0 flex justify-center items-center p-[30px] font-[700] text-[34px] leading-[40px] overflow-hidden break-all text-[#000] rounded-[24px]"
            style={{
              background: "rgba(255, 255, 255, 0.6)",
            }}
          >
            {date}
          </div>
        </div>
        <div className="ml-[15px] w-[180px] h-[180px] border-[4px] border-[#000] rounded-[24px] shrink-0 bg-[#fff] flex justify-center items-center">
          <Image src={props.qrcode} alt="" width="150" height="150" />
        </div>
      </div>
    </main>
  );
}

export const getServerSideProps: GetServerSideProps = async (context) => {
  console.log(context.req.method);
  let props: any = {};

  const users =
    (context.query.users && JSON.parse(context.query.users as string)) || [];
  const subject = context.query.subject || "";
  const title = context.query.title || "";
  const date = context.query.date || "";
  const link = context.query.link || "";

  const bgIndex = Math.floor(Math.random() * 13) + 1;
  props.bgIndex = bgIndex;

  const width = 1035;

  const calcWidth =
    users.length * avatarWidth - (users.length - 1) * avatarSpace + 160;

  props.width = Math.max(width, calcWidth);

  const qrcode = await createQrcode(String(link), 100);

  props.subject = subject;
  props.title = title;
  props.date = date;
  props.link = link;
  props.users = users;
  props.qrcode = qrcode;
  return {
    props,
  };
};
